// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block _CBCoreSingle
#ifndef _CBCORESINGLE_H_
#define _CBCORESINGLE_H_

#include "fbtypes.h"
#include "util.h"



//This is a CFB, so we need the #includes for the child blocks embedded here
#include "FB_SifbAmmeter.h"
#include "FB_SifbTimer.h"
#include "FB_CfbBreakerController.h"
#include "FB_SifbManagementControls.h"
#include "FB_SifbIntLed.h"
#include "FB_SifbManagementControls.h"
#include "FB_SifbIntLed.h"
#include "FB_SifbAmmeter.h"
#include "FB_CfbBreakerController.h"
#include "FB_SifbTimer.h"
#include "FB_SifbManagementControls.h"
#include "FB_SifbIntLed.h"
#include "FB_SifbAmmeter.h"
#include "FB_CfbBreakerController.h"
#include "FB_SifbTimer.h"
#include "FB_SifbCBPrintStatus.h"




//this block had no input events


//this block had no output events


typedef struct {
    //input events
	

    //output events
	

    //input vars
	
    //output vars
	
	//any internal vars (BFBs only)
    
	//any child FBs (CFBs only)
	SifbAmmeter_t amm1;
	SifbTimer_t timer1;
	CfbBreakerController_t cb1;
	SifbManagementControls_t hm1;
	SifbIntLed_t led1;
	SifbManagementControls_t hm3;
	SifbIntLed_t led3;
	SifbAmmeter_t amm3;
	CfbBreakerController_t cb3;
	SifbTimer_t timer3;
	SifbManagementControls_t hm2;
	SifbIntLed_t led2;
	SifbAmmeter_t amm2;
	CfbBreakerController_t cb2;
	SifbTimer_t timer2;
	SifbCBPrintStatus_t print;
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	
	

	

} _CBCoreSingle_t;

//all FBs get a preinit function
int _CBCoreSingle_preinit(_CBCoreSingle_t  *me);

//all FBs get an init function
int _CBCoreSingle_init(_CBCoreSingle_t  *me);

//all FBs get a run function
void _CBCoreSingle_run(_CBCoreSingle_t  *me);

//composite/resource/device FBs get sync functions
void _CBCoreSingle_syncOutputEvents(_CBCoreSingle_t  *me);
void _CBCoreSingle_syncInputEvents(_CBCoreSingle_t  *me);

void _CBCoreSingle_syncOutputData(_CBCoreSingle_t  *me);
void _CBCoreSingle_syncInputData(_CBCoreSingle_t  *me);



#endif
