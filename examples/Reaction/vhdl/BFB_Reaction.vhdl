-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for BFB_Reaction

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity BFB_Reaction is

	port(
		--for clock and reset signal
		clk		: in	std_logic;
		reset	: in	std_logic;
		enable	: in	std_logic;
		sync	: in	std_logic;
		
		--input events
		rx_change_eI : in std_logic := '0';
		
		
		--output events
		tx_change_eO : out std_logic;
		
		
		--input variables
		rx_I : in std_logic := '0'; --type was BOOL
		
		
		--output variables
		tx_O : out std_logic; --type was BOOL
		
		
		--for done signal
		done : out std_logic
	);

end entity;


architecture rtl of BFB_Reaction is
	-- Build an enumerated type for the state machine
	type state_type is (STATE_Update);

	-- Register to hold the current state
	signal state   : state_type := STATE_Update;

	-- signals to store variable sampled on enable 
	signal rx : std_logic := '0'; --register for input
	
	-- signals to rename outputs 
	signal tx : std_logic := '0'; 
	

	
	--signals to rename output events
	signal tx_change_eO_ecc_out : std_logic := '0'; --used when event driven from ECC (normal FB behaviour)
	signal tx_change_eO_alg_out : std_logic := '0'; --used when event driven from algorithm (normal SIFB behaviour)
	

	-- signals for enabling algorithms	
	signal REACTION_TO_CHANGE_alg_en : std_logic := '0'; 
	signal REACTION_TO_CHANGE_alg_done : std_logic := '1';
	

	-- signal for algorithm completion
	signal AlgorithmsStart : std_logic := '0';
	signal AlgorithmsDone : std_logic;

	
begin
	-- Registers for data variables (only updated on relevant events)
	process (clk)
	begin
		if rising_edge(clk) then
			if sync = '1' then
				
				if rx_change_eI = '1' then
					rx <= rx_I;
				end if;
				
			end if;
		end if;
	end process;
	
	--output var renaming, no output registers as inputs are stored where they are processed
	tx_O <= tx;
			
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= STATE_Update;
			AlgorithmsStart <= '1';
		elsif (rising_edge(clk)) then
			if AlgorithmsStart = '1' then --algorithms should be triggered only once via this pulse signal
				AlgorithmsStart <= '0';
			elsif enable = '1' then 
				--default values
				state <= state;
				AlgorithmsStart <= '0';

				--next state logic
				case state is
					when STATE_Update =>
						if rx_change = '1' then
							state <= STATE_Update;
							AlgorithmsStart <= '1';
						end if;
					
				end case;

			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		--events
		tx_change_eO_ecc_out <= '0';
		
		--algorithms
		REACTION_TO_CHANGE_alg_en <= '0'; 

		case state is
			when STATE_Update =>
				REACTION_TO_CHANGE_alg_en <= '1';
				tx_change_eO_ecc_out <= '1';
				
			
		end case;
	end process;

	-- Algorithms process
	process(clk)
	begin
		if rising_edge(clk) then
			if AlgorithmsStart = '1' then			
				
				if REACTION_TO_CHANGE_alg_en = '1' then -- Algorithm REACTION_TO_CHANGE
					REACTION_TO_CHANGE_alg_done <= '0';
					
					--logic for resetting algorithm-driven output events
					tx_change_eO_alg_out <= '0';
					
				end if;
				
			end if;

			
			if REACTION_TO_CHANGE_alg_done = '0' then -- Algorithm REACTION_TO_CHANGE

--begin algorithm raw text
tx <= rx;
REACTION_TO_CHANGE_alg_done <= '1';
--end algorithm raw text

			end if;
			
		end if;
	end process;

	--Done signal
	AlgorithmsDone <= (not AlgorithmsStart) and (not enable) and REACTION_TO_CHANGE_alg_done;
	Done <= AlgorithmsDone;

	
	--logic for renamed output events
	tx_change_eO <= tx_change_eO_ecc_out or tx_change_eO_alg_out;
	

end rtl;
