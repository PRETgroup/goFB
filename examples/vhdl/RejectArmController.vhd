-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for RejectArmController (index .BlockIndex)

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity RejectArmController is

	port(
		--for clock and reset signal
		clk		: in	std_logic;
		reset	: in	std_logic;
		enable	: in	std_logic;
		sync	: in	std_logic;
		
		--input events
		RejectCanister : in std_logic;
		LasersChanged : in std_logic;
		
		
		--output events
		GoRejectArm : out std_logic;
		
		
		--input variables
		RejectSiteLaser_I : in std_logic; --type was BOOL
		
		
		
		--for done signal
		done : out std_logic
	);

end entity;


architecture rtl of RejectArmController is
	-- Build an enumerated type for the state machine
	type state_type is (Clear_S, AwaitCanister_S, GoReject_S);

	-- Register to hold the current state
	signal state   : state_type := Clear_S;

	-- signals to store variable sampled on enable 
	signal RejectSiteLaser : std_logic := '0'; --register for input
	
	

	-- signals for enabling algorithms	

	-- signal for algorithm completion
	signal AlgorithmsStart : std_logic := '0';
	signal AlgorithmsDone : std_logic;

	
begin
	-- Registers for data variables (only updated on relevant events)
	process (clk)
	begin
		if rising_edge(clk) then
			if sync = '1' then
				
				if LasersChanged = '1' then
					RejectSiteLaser <= RejectSiteLaser_I;
				end if;
				
			end if;
		end if;
	end process;
	
			
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= Clear_S;
			AlgorithmsStart <= '1';
		elsif (rising_edge(clk)) then
			if AlgorithmsStart = '1' then --algorithms should be triggered only once via this pulse signal
				AlgorithmsStart <= '0';
			elsif enable = '1' then 
				--default values
				state <= state;
				AlgorithmsStart <= '0';

				--next state logic
				if AlgorithmsStart = '0' and AlgorithmsDone = '1' then
					case state is
						when Clear_S=>
							if RejectCanister = '1' then
								state <= AwaitCanister_S;
								AlgorithmsStart <= '1';
							end if;
						when AwaitCanister_S=>
							if LasersChanged = '1' and (RejectSiteLaser = '1') then
								state <= GoReject_S;
								AlgorithmsStart <= '1';
							end if;
						when GoReject_S=>
							if RejectCanister = '1' then
								state <= AwaitCanister_S;
								AlgorithmsStart <= '1';
							end if;
						
					end case;
				end if;
			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		--events
		GoRejectArm <= '0';
		
		

		case state is
			when Clear_S=>
				
			when AwaitCanister_S=>
				
			when GoReject_S=>
				GoRejectArm <= '1';
				
			
		end case;
	end process;

	--This Basic FB had no algorithms
	

	--Done signal
	AlgorithmsDone <= (not AlgorithmsStart);
	Done <= AlgorithmsDone;
end rtl;
