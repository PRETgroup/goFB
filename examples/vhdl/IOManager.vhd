-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for IOManager (index .BlockIndex)

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity IOManager is

	port(
		--for clock and reset signal
		clk		: in	std_logic;
		reset	: in	std_logic;
		enable	: in	std_logic;
		sync	: in	std_logic;
		
		--input events
		DoorReleaseCanister : in std_logic;
		ConveyorChanged : in std_logic;
		InjectorPositionChanged : in std_logic;
		InjectorControlsChanged : in std_logic;
		FillContentsChanged : in std_logic;
		StartVacuumTimer : in std_logic;
		GoRejectArm : in std_logic;
		CanisterCountChanged : in std_logic;
		InjectDone : in std_logic;
		
		
		--output events
		InjectorArmFinishMovement : out std_logic;
		EmergencyStopChanged : out std_logic;
		CanisterPressureChanged : out std_logic;
		FillContentsAvailableChanged : out std_logic;
		LasersChanged : out std_logic;
		DoorOverride : out std_logic;
		VacuumTimerElapsed : out std_logic;
		
		
		--input variables
		ConveyorSpeed_I : in unsigned(7 downto 0); --type was BYTE
		InjectorPosition_I : in unsigned(7 downto 0); --type was BYTE
		InjectorContentsValveOpen_I : in std_logic; --type was BOOL
		InjectorVacuumRun_I : in std_logic; --type was BOOL
		InjectorPressurePumpRun_I : in std_logic; --type was BOOL
		FillContents_I : in std_logic; --type was BOOL
		CanisterCount_I : in unsigned(7 downto 0); --type was BYTE
		
		
		--output variables
		EmergencyStop_O : out std_logic; --type was BOOL
		CanisterPressure_O : out unsigned(7 downto 0); --type was BYTE
		FillContentsAvailable_O : out unsigned(7 downto 0); --type was BYTE
		DoorSiteLaser_O : out std_logic; --type was BOOL
		InjectSiteLaser_O : out std_logic; --type was BOOL
		RejectSiteLaser_O : out std_logic; --type was BOOL
		RejectBinLaser_O : out std_logic; --type was BOOL
		AcceptBinLaser_O : out std_logic; --type was BOOL
		
		
		--special emitted internal vars for I/O
		UART_TX : out unsigned(7 downto 0); --type was BYTE
		UART_TX_READY : in std_logic; --type was BOOL
		UART_TX_SEND : out std_logic; --type was BOOL
		
		--for done signal
		done : out std_logic
	);

end entity;


architecture rtl of IOManager is
	-- Build an enumerated type for the state machine
	type state_type is (Start_S);

	-- Register to hold the current state
	signal state   : state_type := Start_S;

	-- signals to store variable sampled on enable 
	signal ConveyorSpeed : unsigned(7 downto 0) := (others => '0'); --register for input
	signal InjectorPosition : unsigned(7 downto 0) := (others => '0'); --register for input
	signal InjectorContentsValveOpen : std_logic := '0'; --register for input
	signal InjectorVacuumRun : std_logic := '0'; --register for input
	signal InjectorPressurePumpRun : std_logic := '0'; --register for input
	signal FillContents : std_logic := '0'; --register for input
	signal CanisterCount : unsigned(7 downto 0) := (others => '0'); --register for input
	
	-- signals to rename outputs 
	signal EmergencyStop : std_logic := '0'; 
	signal CanisterPressure : unsigned(7 downto 0) := (others => '0'); 
	signal FillContentsAvailable : unsigned(7 downto 0) := (others => '0'); 
	signal DoorSiteLaser : std_logic := '0'; 
	signal InjectSiteLaser : std_logic := '0'; 
	signal RejectSiteLaser : std_logic := '0'; 
	signal RejectBinLaser : std_logic := '0'; 
	signal AcceptBinLaser : std_logic := '0'; 
	

	-- signals for enabling algorithms	
	signal IOAlgorithm_alg_en : std_logic := '0'; 
	signal IOAlgorithm_alg_done : std_logic := '1';
	

	-- signal for algorithm completion
	signal AlgorithmsStart : std_logic := '0';
	signal AlgorithmsDone : std_logic;

	--internal variables 
	signal EmergencyStopped : std_logic; --type was BOOL 
begin
	-- Registers for data variables (only updated on relevant events)
	process (clk)
	begin
		if rising_edge(clk) then
			if sync = '1' then
				
				if ConveyorChanged = '1' then
					ConveyorSpeed <= ConveyorSpeed_I;
				end if;
				
				if InjectorPositionChanged = '1' then
					InjectorPosition <= InjectorPosition_I;
				end if;
				
				if InjectorControlsChanged = '1' then
					InjectorContentsValveOpen <= InjectorContentsValveOpen_I;
					InjectorVacuumRun <= InjectorVacuumRun_I;
					InjectorPressurePumpRun <= InjectorPressurePumpRun_I;
				end if;
				
				if FillContentsChanged = '1' then
					FillContents <= FillContents_I;
				end if;
				
				if CanisterCountChanged = '1' then
					CanisterCount <= CanisterCount_I;
				end if;
				
			end if;
		end if;
	end process;
	
	--output var renaming, no output registers as inputs are stored where they are processed
	EmergencyStop_O <= EmergencyStop;
	CanisterPressure_O <= CanisterPressure;
	FillContentsAvailable_O <= FillContentsAvailable;
	DoorSiteLaser_O <= DoorSiteLaser;
	InjectSiteLaser_O <= InjectSiteLaser;
	RejectSiteLaser_O <= RejectSiteLaser;
	RejectBinLaser_O <= RejectBinLaser;
	AcceptBinLaser_O <= AcceptBinLaser;
			
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= Start_S;
			AlgorithmsStart <= '1';
		elsif (rising_edge(clk)) then
			if AlgorithmsStart = '1' then --algorithms should be triggered only once via this pulse signal
				AlgorithmsStart <= '0';
			elsif enable = '1' then 
				--default values
				state <= state;
				AlgorithmsStart <= '0';

				--next state logic
				if AlgorithmsStart = '0' and AlgorithmsDone = '1' then
					case state is
						when Start_S=>
							if true then
								state <= Start_S;
								AlgorithmsStart <= '1';
							end if;
						
					end case;
				end if;
			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		--events
		InjectorArmFinishMovement <= '0';
		EmergencyStopChanged <= '0';
		CanisterPressureChanged <= '0';
		FillContentsAvailableChanged <= '0';
		LasersChanged <= '0';
		DoorOverride <= '0';
		VacuumTimerElapsed <= '0';
		
		--algorithms
		IOAlgorithm_alg_en <= '0'; 

		case state is
			when Start_S=>
				IOAlgorithm_alg_en <= '1';
				EmergencyStopChanged <= '1';
				
			
		end case;
	end process;

	-- Algorithms process
	process(clk)
	begin
		if rising_edge(clk) then
			if AlgorithmsStart = '1' then			
				
				if IOAlgorithm_alg_en = '1' then -- Algorithm IOAlgorithm
					IOAlgorithm_alg_done <= '0';
				end if;
				
			end if;

			
			if IOAlgorithm_alg_done = '0' then -- Algorithm IOAlgorithm

--begin algorithm raw text
#define NUM_BOTTLES 4

static int emergencyStopped = 1;

static int conveyorSpeed = 0;

int i;

static int tickNum = 0;

printf("ATTN: Tick number %i\n", tickNum);
tickNum++;


static int bottlePositions[NUM_BOTTLES] = {0};
static int bottlesActive[NUM_BOTTLES] = {0};
static int nextBottle = 0;

//reset all the things
me->EmergencyStop = 0;
me->CanisterPressure = 255;
me->FillContentsAvailable = 255;
me->DoorSiteLaser = 0;
me->InjectSiteLaser = 0;
me->RejectSiteLaser = 0;
me->RejectBinLaser = 0;
me->AcceptBinLaser = 0;


//printf("=====new tick\n");

//continue progress
if(conveyorSpeed) {
	for(i = 0; i < NUM_BOTTLES; i++) {
		if(bottlesActive[i]) {
			bottlePositions[i] += conveyorSpeed;
			printf("IO: Canister %i moves to %i\n", i, bottlePositions[i]);
			
			if(bottlePositions[i] == 5) {
				printf("IO: Canister %i at 5, triggering InjectSiteLaser\n", i);
				me->_output.event.LasersChanged = 1;
				me->InjectSiteLaser = 1;
			}

			if(bottlePositions[i] == 10) {
				printf("IO: Canister %i at 10, triggering RejectSiteLaser\n", i);
				me->_output.event.LasersChanged = 1;
				me->RejectSiteLaser = 1;
			}

			if(bottlePositions[i] == 20) {
				printf("IO: Canister %i at 20, falls off conveyor, triggering AcceptBinLaser\n", i);
				me->_output.event.LasersChanged = 1;
				me->AcceptBinLaser = 1;
				bottlesActive[i] = 0;
				bottlePositions[i] = 0;
			}

			if(me->_input.event.GoRejectArm && (bottlePositions[i] == 10 || bottlePositions[i] == 11 || bottlePositions[i] == 12)) {
				printf("IO: Go Reject Arm. Canister %i knocked from conveyor.\n", i);
				//progress = 0;
				me->_output.event.LasersChanged = 1;
				me->RejectBinLaser = 1;
				bottlesActive[i] = 0;
				bottlePositions[i] = 0;
			}
		}
	}
}

if(tickNum == 25) {
	printf("Progress at 25, halting\n");
	while(1);
}

if(me->_input.event.InjectDone) {
	printf("IO: Inject done\n");
}



if(emergencyStopped == 1) {
	printf("IO: Releasing emergency stop\n");
	me->_output.event.EmergencyStopChanged = 1;
	me->EmergencyStop = 0;
	emergencyStopped++;
} else {
	
	if(me->_input.event.DoorReleaseCanister) {
		printf("IO: Door released. Adding canister %i\n", nextBottle);

		me->_output.event.LasersChanged = 1;
		me->DoorSiteLaser = 1;
			
		bottlesActive[nextBottle] = 1;

		nextBottle++;
		nextBottle = nextBottle % NUM_BOTTLES;
		
	}
	if(me->_input.event.InjectorPositionChanged) {
		printf("IO: Injector position changed. Setting move finished.\n");
		me->_output.event.InjectorArmFinishMovement = 1;
	}

	if(me->_input.event.ConveyorChanged) {
		conveyorSpeed = me->ConveyorSpeed;
		printf("IO: Setting conveyor movement to %i\n", conveyorSpeed);
	}

	

	if(me->_input.event.InjectorControlsChanged) {
		printf("IO: Injector controls changed. Now they are Vac: %1i Val: %1i Pmp: %1i\n", me->InjectorVacuumRun, me->InjectorContentsValveOpen, me->InjectorPressurePumpRun);
		if(me->InjectorVacuumRun) {
			printf("IO: Due to vacuum, changing canister pressure to 5.\n");
			me->CanisterPressure = 5;
			me->_output.event.CanisterPressureChanged = 1;
		}
		if(me->InjectorContentsValveOpen) {
			printf("IO: Contents valve now open. Pressure changes slightly, sucking in contents.\n");
			me->CanisterPressure = 20;
			me->_output.event.CanisterPressureChanged = 1;
		}
		if(me->InjectorPressurePumpRun) {
			printf("IO: Due to pressure pump, changing canister pressure to 250.\n");
			me->CanisterPressure = 250;
			me->_output.event.CanisterPressureChanged = 1;
		}
	}
	
	if(me->_input.event.FillContentsChanged) {
		printf("IO: Fill contents changed.\n");
	}

	if(me->_input.event.StartVacuumTimer) {
		printf("IO: Start vacuum timer.\n");//Elapsing timer.\n");
		//me->_output.event.VacuumTimerElapsed = 1;
	}

	

	if(me->_input.event.CanisterCountChanged) {
		printf("IO: Canister count changed. New value: %i\n", me->CanisterCount);
	}


}


IOAlgorithm_alg_done <= '1';
--end algorithm raw text

			end if;
			
		end if;
	end process;

	--Done signal
	AlgorithmsDone <= (not AlgorithmsStart) and IOAlgorithm_alg_done;
	Done <= AlgorithmsDone;
end rtl;
