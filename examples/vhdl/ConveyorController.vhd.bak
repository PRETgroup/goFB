
-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for ConveyorController

library ieee;
use ieee.std_logic_1164.all;


entity ConveyorController is

	port(
		--for clock and reset signal
		clk		: in	std_logic;
		reset	: in	std_logic;
		enable	: in	std_logic;
		
		--input events
		InjectDone : in std_logic;
		EmergencyStopChanged : in std_logic;
		LasersChanged : in std_logic;
		
		
		--output events
		ConveyorChanged : out std_logic;
		ConveyorStoppedForInject : out std_logic;
		
		
		--input variables
		EmergencyStop : in std_logic; --type was BOOL
		InjectSiteLaser : in std_logic; --type was BOOL
		
		
		--output variables
		ConveyorSpeed : out std_logic_vector(7 downto 0); --type was BYTE
		
		--for done signal
		done : out std_logic
	);

end entity;


architecture rtl of ConveyorController is
	
	-- Build an enumerated type for the state machine
	type state_type is (E_Stop, Running, Pause);

	-- Register to hold the current state
	signal state   : state_type;
	signal entered : std_logic; --entered is used to trigger algorithms (algorithms should only run upon entering a state)

	-- signals for enabling algorithms	
	signal ConveyorStart_alg_en : std_logic; 
	signal ConveyorStop_alg_en : std_logic; 
	signal ConveyorRunning_alg_en : std_logic; 
	signal ConveyorEStop_alg_en : std_logic; 

	--internal variables 
	signal Variable1 : std_logic; --type was BOOL 
begin
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= E_Stop;
			entered <= '0';
		elsif (rising_edge(clk)) then
			if enable = '1' then 
				--default values
				state <= state;
				entered <= '1';

				--next state logic
				if entered = '0' then
					entered <= '1';
				else
					case state is
						when E_Stop=>
							if EmergencyStopChanged = '1' and (not EmergencyStop = '1') then
								state <= Running;
								entered <= '0';
							end if;
						when Running=>
							if LasersChanged = '1' and (InjectSiteLaser = '1') then
								state <= Pause;
								entered <= '0';
							end if;
						when Pause=>
							if InjectDone = '1' then
								state <= Running;
								entered <= '0';
							elsif EmergencyStopChanged = '1' and (EmergencyStop = '1') then
								state <= E_Stop;
								entered <= '0';
							end if;
						
					end case;
				end if;
			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		--events
		ConveyorChanged <= '0';
		ConveyorStoppedForInject <= '0';
		
		--algorithms
		ConveyorStart_alg_en <= '0'; 
		ConveyorStop_alg_en <= '0'; 
		ConveyorRunning_alg_en <= '0'; 
		ConveyorEStop_alg_en <= '0'; 

		case state is
			when E_Stop=>
				
			when Running=>
				ConveyorStart_alg_en <= '1';
				ConveyorChanged <= '1';
				
			when Pause=>
				ConveyorStop_alg_en <= '1';
				ConveyorChanged <= '1';
				ConveyorStoppedForInject <= '1';
				
			
		end case;
	end process;

	-- Algorithms
	
	-- Algorithm ConveyorStart
	process(clk)
	begin
		if rising_edge(clk) then
			if (entered = '0' and ConveyorStart_alg_en = '1') then

--begin algorithm raw text
ConveyorSpeed <= conv_std_logic_vector(1, 8);
--end algorithm raw text

			end if;
		end if;
	end process;
	
	-- Algorithm ConveyorStop
	process(clk)
	begin
		if rising_edge(clk) then
			if (entered = '0' and ConveyorStop_alg_en = '1') then

--begin algorithm raw text
ConveyorSpeed <= conv_std_logic_vector(0, 8);
--end algorithm raw text

			end if;
		end if;
	end process;
	
	-- Algorithm ConveyorRunning
	process(clk)
	begin
		if rising_edge(clk) then
			if (entered = '0' and ConveyorRunning_alg_en = '1') then

--begin algorithm raw text

--end algorithm raw text

			end if;
		end if;
	end process;
	
	-- Algorithm ConveyorEStop
	process(clk)
	begin
		if rising_edge(clk) then
			if (entered = '0' and ConveyorEStop_alg_en = '1') then

--begin algorithm raw text

--end algorithm raw text

			end if;
		end if;
	end process;
	
end rtl;
