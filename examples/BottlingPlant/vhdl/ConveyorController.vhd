-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for ConveyorController

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity ConveyorController is

	port(
		--for clock and reset signal
		clk		: in	std_logic;
		reset	: in	std_logic;
		enable	: in	std_logic;
		sync	: in	std_logic;
		
		--input events
		InjectDone : in std_logic;
		EmergencyStopChanged : in std_logic;
		LasersChanged : in std_logic;
		
		
		--output events
		ConveyorChanged : out std_logic;
		ConveyorStoppedForInject : out std_logic;
		
		
		--input variables
		EmergencyStop_I : in std_logic; --type was BOOL
		InjectSiteLaser_I : in std_logic; --type was BOOL
		
		
		--output variables
		ConveyorSpeed_O : out unsigned(7 downto 0); --type was BYTE
		
		
		--for done signal
		done : out std_logic
	);

end entity;


architecture rtl of ConveyorController is
	-- Build an enumerated type for the state machine
	type state_type is (STATE_E_Stop, STATE_Running, STATE_Pause);

	-- Register to hold the current state
	signal state   : state_type := STATE_E_Stop;

	-- signals to store variable sampled on enable 
	signal EmergencyStop : std_logic := '0'; --register for input
	signal InjectSiteLaser : std_logic := '0'; --register for input
	
	-- signals to rename outputs 
	signal ConveyorSpeed : unsigned(7 downto 0) := (others => '0'); 
	

	-- signals for enabling algorithms	
	signal ConveyorStart_alg_en : std_logic := '0'; 
	signal ConveyorStart_alg_done : std_logic := '1';
	
	signal ConveyorStop_alg_en : std_logic := '0'; 
	signal ConveyorStop_alg_done : std_logic := '1';
	
	signal ConveyorRunning_alg_en : std_logic := '0'; 
	signal ConveyorRunning_alg_done : std_logic := '1';
	
	signal ConveyorEStop_alg_en : std_logic := '0'; 
	signal ConveyorEStop_alg_done : std_logic := '1';
	

	-- signal for algorithm completion
	signal AlgorithmsStart : std_logic := '0';
	signal AlgorithmsDone : std_logic;

	--internal variables 
	signal Variable1 : std_logic; --type was BOOL 
begin
	-- Registers for data variables (only updated on relevant events)
	process (clk)
	begin
		if rising_edge(clk) then
			if sync = '1' then
				
				if EmergencyStopChanged = '1' then
					EmergencyStop <= EmergencyStop_I;
				end if;
				
				if LasersChanged = '1' then
					InjectSiteLaser <= InjectSiteLaser_I;
				end if;
				
			end if;
		end if;
	end process;
	
	--output var renaming, no output registers as inputs are stored where they are processed
	ConveyorSpeed_O <= ConveyorSpeed;
			
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= STATE_E_Stop;
			AlgorithmsStart <= '1';
		elsif (rising_edge(clk)) then
			if AlgorithmsStart = '1' then --algorithms should be triggered only once via this pulse signal
				AlgorithmsStart <= '0';
			elsif enable = '1' then 
				--default values
				state <= state;
				AlgorithmsStart <= '0';

				--next state logic
				if AlgorithmsStart = '0' and AlgorithmsDone = '1' then
					case state is
						when STATE_E_Stop =>
							if EmergencyStopChanged = '1' and (not EmergencyStop = '1') then
								state <= STATE_Running;
								AlgorithmsStart <= '1';
							end if;
						when STATE_Running =>
							if LasersChanged = '1' and (InjectSiteLaser = '1') then
								state <= STATE_Pause;
								AlgorithmsStart <= '1';
							end if;
						when STATE_Pause =>
							if InjectDone = '1' then
								state <= STATE_Running;
								AlgorithmsStart <= '1';
							elsif EmergencyStopChanged = '1' and (EmergencyStop = '1') then
								state <= STATE_E_Stop;
								AlgorithmsStart <= '1';
							end if;
						
					end case;
				end if;
			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		--events
		ConveyorChanged <= '0';
		ConveyorStoppedForInject <= '0';
		
		--algorithms
		ConveyorStart_alg_en <= '0'; 
		ConveyorStop_alg_en <= '0'; 
		ConveyorRunning_alg_en <= '0'; 
		ConveyorEStop_alg_en <= '0'; 

		case state is
			when STATE_E_Stop =>
				
			when STATE_Running =>
				ConveyorStart_alg_en <= '1';
				ConveyorChanged <= '1';
				
			when STATE_Pause =>
				ConveyorStop_alg_en <= '1';
				ConveyorChanged <= '1';
				ConveyorStoppedForInject <= '1';
				
			
		end case;
	end process;

	-- Algorithms process
	process(clk)
	begin
		if rising_edge(clk) then
			if AlgorithmsStart = '1' then			
				
				if ConveyorStart_alg_en = '1' then -- Algorithm ConveyorStart
					ConveyorStart_alg_done <= '0';
				end if;
				
				if ConveyorStop_alg_en = '1' then -- Algorithm ConveyorStop
					ConveyorStop_alg_done <= '0';
				end if;
				
				if ConveyorRunning_alg_en = '1' then -- Algorithm ConveyorRunning
					ConveyorRunning_alg_done <= '0';
				end if;
				
				if ConveyorEStop_alg_en = '1' then -- Algorithm ConveyorEStop
					ConveyorEStop_alg_done <= '0';
				end if;
				
			end if;

			
			if ConveyorStart_alg_done = '0' then -- Algorithm ConveyorStart

--begin algorithm raw text
ConveyorSpeed <= x"01";
ConveyorStart_alg_done <= '1';
--end algorithm raw text

			end if;
			
			if ConveyorStop_alg_done = '0' then -- Algorithm ConveyorStop

--begin algorithm raw text
ConveyorSpeed <= x"00";
ConveyorStop_alg_done <= '1';
--end algorithm raw text

			end if;
			
			if ConveyorRunning_alg_done = '0' then -- Algorithm ConveyorRunning

--begin algorithm raw text
ConveyorRunning_alg_done <= '1';
--end algorithm raw text

			end if;
			
			if ConveyorEStop_alg_done = '0' then -- Algorithm ConveyorEStop

--begin algorithm raw text
ConveyorEStop_alg_done <= '1';
--end algorithm raw text

			end if;
			
		end if;
	end process;

	--Done signal
	AlgorithmsDone <= (not AlgorithmsStart) and ConveyorStart_alg_done and ConveyorStop_alg_done and ConveyorRunning_alg_done and ConveyorEStop_alg_done;
	Done <= AlgorithmsDone;
end rtl;
