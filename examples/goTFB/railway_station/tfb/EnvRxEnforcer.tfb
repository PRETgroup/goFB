basicFB EnvRxEnforcer;
interface of EnvRxEnforcer {
	in event SoChange;
    in with SoChange bool SoGrn := false;

    in event SChange_in;
    in with SChange_in bool SiGrn_in := false;
    in with SChange_in bool SnGrn_in := false;
    in with SChange_in bool SsGrn_in := false;

    in event WChange_in;
    in with WChange_in bool WiDvrg_in := false;
    in with WChange_in bool WoDvrg_in := false;
    in with WChange_in bool WnDvrg_in := false;
    in with WChange_in bool WsDvrg_in := false;

    in event DChange_in; 
    in with DChange_in bool DwiPrs_in := false;
    in with DChange_in bool DwoPrs_in := false;
    in with DChange_in bool DwnPrs_in := false;
    in with DChange_in bool DwsPrs_in := false;
    in with DChange_in bool DnPrs_in := false;
    in with DChange_in bool DsPrs_in := false;

	out event EnforcerAbortedAction; //let the controller know it done bad

	out event SChange_out;
    out with SChange_out bool SiGrn_out := false;
    out with SChange_out bool SnGrn_out := false;
    out with SChange_out bool SsGrn_out := false;

    out event WChange_out;
    out with WChange_out bool WiDvrg_out := false;
    out with WChange_out bool WoDvrg_out := false;
    out with WChange_out bool WnDvrg_out := false;
    out with WChange_out bool WsDvrg_out := false;
}

architecture of EnvRxEnforcer {

	//our own modifiable copies of the inputs
	//we'll make sure we're happy with these before we pass them to the outputs
	internal bool SiGrn, SnGrn, SsGrn, WiDvrg, WoDvrg, WnDvrg, WsDvrg := false;

	//we have two ways of dealing with failures
	//some failures are recoverable, where we make a change to the inputs and then try another pass
	//some failures are unrecovereable, where we simply don't pass the current i/o to the system
	states {
		idle {
			//do a check through when we get an input event
			run in "C" `printf("idle\r\n");`;
			-> copyVals on (SChange_in || WChange_in);
		}

		copyVals {
			//run in "C" `printf("copyVals\r\n");`;
			run copyInVals;
			-> startCheck;
		}

		startCheck {
			//run in "C" `printf("startCheck\r\n");`;
			-> singleGreenSiSnSs;
		}

		singleGreenSiSnSs {
			//run in "C" `printf("singleGreenSiSnSs\r\n");`;
			-> singleGreenSiSnSs_correction on (SiGrn + SnGrn + SsGrn) > 1;
			-> SoRequiredForSnSs;
		}

		singleGreenSiSnSs_correction {
			//too many greens, no way to rectify this
			//stick with current outputs, take no action other than blocking
			//run in "C" `printf("singleGreenSiSnSs_unrecoverable\r\n");`;
			run in "C" `me->SiGrn = me->SiGrn_out; me->SnGrn = me->SnGrn_out; me->SsGrn = me->SsGrn_out;`;
			emit EnforcerAbortedAction;
			-> SoRequiredForSnSs; //continue analysis
		}

		SoRequiredForSnSs {
			run in "C" `printf("Enforcer: SoRequiredForSnSs\r\n");`;
			-> SoRequiredForSnSs_correction on SoGrn == 0 && (SnGrn == 1 || SsGrn == 1);
			-> WiWsMatch;
		}

		SoRequiredForSnSs_correction {
			run in "C" `printf("Enforcer: SoRequiredForSnSs_correction\r\n");`;
			run in "C" `me->SnGrn = 0; me->SsGrn = 0;`;
			emit EnforcerAbortedAction;
			-> WiWsMatch;
		}

		WiWsMatch {
			-> WiWsMatch_correction on SiGrn == 1 && WiDvrg == 1 && WsDvrg != 1;
			-> WiWnMatch;
		}

		WiWsMatch_correction {
			run in "C" `me->WsDvrg = 1;`;
			//corrected but not aborted
			-> WiWnMatch;
		}

		WiWnMatch {
			-> WiWnMatch_correction on SiGrn == 1 && WiDvrg == 0 && WnDvrg != 0;
			-> SsWMatch; 
		}

		WiWnMatch_correction {
			run in "C" `me->WnDvrg = 0;`;
			-> SsWMatch;
		}

		SsWMatch {
			-> SsWMatch_correction on SsGrn == 1 && (WsDvrg != 0 || WoDvrg != 0);
			-> SnWMatch;
		}

		SsWMatch_correction {
			run in "C" `me->WsDvrg = 0; me->WoDvrg = 0;`;
			-> SnWMatch;
		}

		SnWMatch {
			-> SnWMatch_correction on SnGrn == 1 && (WnDvrg != 1 || WoDvrg != 1);
			-> finished;
		}

		SnWMatch_correction {
			run in "C" `me->WnDvrg = 1; me->WoDvrg = 1;`;
			-> finished;
		}

		finished {
			//run in "C" `printf("finished\r\n");`;
			run copyOutVals;
			//it's not super clean to emit the events if we don't *have* to, but nothing will technically be hurt if we do
			emit WChange_out;
			emit SChange_out;

			-> idle;
		}


	}

	algorithm copyInVals in "C" `
		//printf("copying in vals\r\n");
		me->SiGrn = me->SiGrn_in;
		me->SnGrn = me->SnGrn_in;
		me->SsGrn = me->SsGrn_in;

		me->WiDvrg = me->WiDvrg_in;
		me->WoDvrg = me->WoDvrg_in;
		me->WnDvrg = me->WnDvrg_in;
		me->WsDvrg = me->WsDvrg_in;
	`;

	algorithm copyOutVals in "C" `
		//printf("copying out vals\r\n");
		me->SiGrn_out = me->SiGrn;
		me->SnGrn_out = me->SnGrn;
		me->SsGrn_out = me->SsGrn;

		me->WiDvrg_out = me->WiDvrg;
		me->WoDvrg_out = me->WoDvrg;
		me->WnDvrg_out = me->WnDvrg;
		me->WsDvrg_out = me->WsDvrg;
	`;
}