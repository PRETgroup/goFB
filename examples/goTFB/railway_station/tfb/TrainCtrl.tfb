basicFB TrainCtrl;
interface of TrainCtrl {
    in event SysReady;
    
    in event RiChange;
    in with RiChange bool RiReq := false;

    in event RnChange;
    in with RnChange bool RnReq := false;

    in event RsChange;
    in with RsChange bool RsReq := false;

    in event DwiChange;
    in with DwiChange bool DwiPrs := false;

    in event DwoChange;
    in with DwoChange bool DwoPrs := false;

    in event DwnChange;
    in with DwnChange bool DwnPrs := false;

    in event DwsChange;
    in with DwsChange bool DwsPrs := false;

    in event DnChange;
    in with DnChange bool DnPrs := false;

    in event DsChange;
    in with DsChange bool DsPrs := false;

    out event SChange;
    out with SChange bool SiGrn := false;
    out with SChange bool SnGrn := false;
    out with SChange bool SsGrn := false;

    out event WChange;
    out with WChange bool WiDvrg := false;
    out with WChange bool WoDvrg := false;
    out with WChange bool WnDvrg := false;
    out with WChange bool WsDvrg := false;

    in event abort;
}

architecture of TrainCtrl {

    internal bool busyN := false;
    internal bool busyS := false;

    state init {
        -> idle on SysReady;
    }

    //in the idle state, all signals should be RED
    //switch positions don't really matter
    state idle {
        run ClrSignals;
        emit SChange;

        -> n_allow_train_exit_0 on RnChange and RnReq == true;
        -> s_allow_train_exit_0 on RsChange and RsReq == true;
        -> i_allow_train_entrance_0 on RiChange and RiReq == true;
    }

    //here's the algorithms that manage the signal/switch network
    algorithm ClrSignals in "C" `
        printf("TrainCtrl: ClrSignals\n");
        me->SiGrn = false;
        me->SnGrn = false;
        me->SsGrn = false;
    `;

    algorithm SetNEntrance in "C" `
        printf("TrainCtrl: SetNEntrance\r\n");
        me->SiGrn = true;
        me->WiDvrg = false;
        me->WnDvrg = false;
        me->busyN = true;
    `;

    algorithm SetSEntrance in "C" `
        printf("TrainCtrl: SetSEntrance\r\n");
        me->SiGrn = true;
        me->WiDvrg = true;
        me->WsDvrg = false; //this is an error!
        me->busyS = true;
    `;

    algorithm SetEntranceHalf in "C" `
        printf("TrainCtrl: SetEntranceHalf\n");
        me->SiGrn = false;
    `;

    algorithm SetNExit in "C" `
        printf("TrainCtrl: SetNExit\n");
        me->SnGrn = true;
        me->WnDvrg = true;
        me->WoDvrg = true;
    `;

    algorithm SetNExitHalf in "C" `
        printf("TrainCtrl: SetNExitHalf\n");
        me->SnGrn = false;
        me->busyN = false;
    `;

    algorithm SetSExit in "C" `
        printf("TrainCtrl: SetSExit\n");
        me->SsGrn = true;
        me->WsDvrg = false;
        me->WoDvrg = false;
    `;

    algorithm SetSExitHalf in "C" `
        printf("TrainCtrl: SetSExitHalf\n");
        me->SsGrn = false;
        me->busyS = false;
    `;

    //train EXITS from platform N
    states {
        n_allow_train_exit_0 {
            run SetNExit;
            emit WChange;
            emit SChange;


            -> n_allow_train_exit_passed_first_signal on DwnChange and DwnPrs == false;
            -> idle on abort;
        }

        n_allow_train_exit_passed_first_signal {
            run SetNExitHalf;
            emit SChange; 

            -> idle on DwoChange and DwoPrs == false;
            -> idle on abort;
        }
    }

    //train EXITS from platform S 
    states {
        s_allow_train_exit_0 {
            run SetSExit;
            emit WChange;
            emit SChange;


            -> s_allow_train_exit_passed_first_signal on DwsChange and DwsPrs == false;
            -> idle on abort;
        }

        s_allow_train_exit_passed_first_signal {
            run SetSExitHalf;
            emit SChange; 

            -> idle on DwoChange and DwoPrs == false;
            -> idle on abort;
        }
    }

    //train request ENTRANCE to platform
    states {
        i_allow_train_entrance_0 {
            //decide which platform to go to, if no platform available, return to idle state to allow a train in the station to exit
            
            -> i_allow_train_entrance_s on busyS == false and DsPrs == false;
            -> i_allow_train_entrance_n on busyN == false and DnPrs == false;
            -> idle;
        }
    }

    //train granted ENTRANCE to platform S
    states {
        i_allow_train_entrance_s {
            run SetSEntrance;
            emit WChange;
            emit SChange;


            -> i_allow_train_entrance_s_passed_first_signal on DwiChange and DwiPrs == false;
            -> idle on abort;
        }

        i_allow_train_entrance_s_passed_first_signal {
            run SetEntranceHalf;
            emit SChange;
            -> idle on DwsChange and DwsPrs == false;
        }
    }

    //train granted ENTRANCE to platform N 
    states {
        i_allow_train_entrance_n {
            run SetNEntrance;
            emit WChange;
            emit SChange;

            -> i_allow_train_entrance_n_passed_first_signal on DwiChange and DwiPrs == false;
            -> idle on abort;
        }

        i_allow_train_entrance_n_passed_first_signal {
            run SetEntranceHalf;
            emit SChange;
            -> idle on DwnChange and DwnPrs == false;
            -> idle on abort;
        }
    }
}