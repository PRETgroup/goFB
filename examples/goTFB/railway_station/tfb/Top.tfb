compositeFB Top;
interface of Top {

}

architecture of Top {
    instances {
        TrainCtrl ctrl;
        EnvRxSystemTx erx;
        EnvTxSystemRxContainer etx;
        EnvRxEnforcer enforcer;
    }

    events {
        ctrl.RiChange <- etx.RiChange;
        ctrl.RnChange <- etx.RnChange;
        ctrl.RsChange <- etx.RsChange;
        
        ctrl.DwiChange <- etx.DwiChange;
        ctrl.DwoChange <- etx.DwoChange;
        ctrl.DwnChange <- etx.DwnChange;
        ctrl.DwsChange <- etx.DwsChange;
        ctrl.DnChange <- etx.DnChange;
        ctrl.DsChange <- etx.DsChange;

        ctrl.SoChange <- etx.SoChange;

        ctrl.SysReady <- etx.SysReady;
        ctrl.abort <- enforcer.EnforcerAbortedAction;

        enforcer.SoChange <- etx.SoChange;

        enforcer.SChange_in <- ctrl.SChange;
        enforcer.WChange_in <- ctrl.WChange;

        enforcer.DChange_in <- etx.DwiChange;
        enforcer.DChange_in <- etx.DwoChange; 
        enforcer.DChange_in <- etx.DwnChange;
        enforcer.DChange_in <- etx.DwsChange; 
        enforcer.DChange_in <- etx.DnChange; 
        enforcer.DChange_in <- etx.DsChange;  
        
        erx.SChange <- enforcer.SChange_out;
        erx.SChange <- etx.SoChange;
        erx.WChange <- enforcer.WChange_out;

        erx.DChangeD <- etx.DwiChange; //D for Display
        erx.DChangeD <- etx.DwoChange; //D for Display
        erx.DChangeD <- etx.DwnChange; //D for Display
        erx.DChangeD <- etx.DwsChange; //D for Display
        erx.DChangeD <- etx.DnChange; //D for Display
        erx.DChangeD <- etx.DsChange; //D for Display       
    }

    data {
        ctrl.RiReq <- etx.RiReq;
        ctrl.RnReq <- etx.RnReq;
        ctrl.RsReq <- etx.RsReq;

        ctrl.SoGrn <- etx.SoGrn;

        ctrl.DwiPrs <- etx.DwiPrs;
        ctrl.DwoPrs <- etx.DwoPrs;
        ctrl.DwnPrs <- etx.DwnPrs;
        ctrl.DwsPrs <- etx.DwsPrs;
        ctrl.DnPrs <- etx.DnPrs;
        ctrl.DsPrs <- etx.DsPrs;

        enforcer.SoGrn <- etx.SoGrn;

        enforcer.SiGrn_in <- ctrl.SiGrn;
        enforcer.SnGrn_in <- ctrl.SnGrn;
        enforcer.SsGrn_in <- ctrl.SsGrn;

        enforcer.WiDvrg_in <- ctrl.WiDvrg;
        enforcer.WoDvrg_in <- ctrl.WoDvrg;
        enforcer.WnDvrg_in <- ctrl.WnDvrg;
        enforcer.WsDvrg_in <- ctrl.WsDvrg;
        enforcer.DwiPrs_in <- etx.DwiPrs;
        enforcer.DwoPrs_in <- etx.DwoPrs;
        enforcer.DwnPrs_in <- etx.DwnPrs;
        enforcer.DwsPrs_in <- etx.DwsPrs;
        enforcer.DnPrs_in <- etx.DnPrs;
        enforcer.DsPrs_in <- etx.DsPrs; 

        erx.SiGrn <- enforcer.SiGrn_out;
        erx.SoGrn <- etx.SoGrn;
        erx.SnGrn <- enforcer.SnGrn_out;
        erx.SsGrn <- enforcer.SsGrn_out;

        erx.WiDvrg <- enforcer.WiDvrg_out;
        erx.WoDvrg <- enforcer.WoDvrg_out;
        erx.WnDvrg <- enforcer.WnDvrg_out;
        erx.WsDvrg <- enforcer.WsDvrg_out;

        erx.DwiPrsD <- etx.DwiPrs;
        erx.DwoPrsD <- etx.DwoPrs;
        erx.DwnPrsD <- etx.DwnPrs;
        erx.DwsPrsD <- etx.DwsPrs;
        erx.DnPrsD <- etx.DnPrs;
        erx.DsPrsD <- etx.DsPrs; 
    }
}