// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block PIDController
#ifndef PIDCONTROLLER_H_
#define PIDCONTROLLER_H_

#include "fbtypes.h"
#include "util.h"



//This is a BFB with states, so we need an enum type for the state machine
enum PIDController_states { STATE_PIDController_start, STATE_PIDController_update, STATE_PIDController_reset };




union PIDControllerInputEvents {
	struct {
		UDINT UpdateConfig;
		UDINT Reset;
		UDINT Tick;
	} event;
	
};


union PIDControllerOutputEvents {
	struct {
		UDINT ControlChanged;
	} event;
	
};


typedef struct {
    //input events
	union PIDControllerInputEvents inputEvents;

    //output events
	union PIDControllerOutputEvents outputEvents;

    //input vars
	REAL PGain;
    REAL IGain;
    REAL DGain;
    REAL WindupGuard;
    REAL DesiredValue;
    REAL CurrentValue;
    
    //output vars
	REAL ControlValue;
    
	//any internal vars (BFBs only)
    REAL pTerm;
    REAL iTerm;
    REAL dTerm;
    REAL previousError;
    REAL currentError;
    REAL integrationError;
    REAL differentialError;
    
	//any child FBs (CFBs only)
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	enum PIDController_states _state; //stores current state
	BOOL _trigger; //indicates if a state transition has occured this tick
	
	
	

	

} PIDController_t;

//all FBs get a preinit function
int PIDController_preinit(PIDController_t  *me);

//all FBs get an init function
int PIDController_init(PIDController_t  *me);

//all FBs get a run function
void PIDController_run(PIDController_t  *me);



#endif
