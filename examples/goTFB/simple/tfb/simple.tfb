basicFB Incr;

interface of Incr {
	in event rx;
	out event tx;

	out int txdat with tx := 1;
} 

architecture of Incr {
	states {
		start {
			-> run on rx;
		}

		run {
			emit tx;
			run in "C" `me->txdat = me->txdat + 1;`;
			
			-> run on rx;
		}
	}
}

serviceFB Emitr;

interface of Emitr {
	out event e;
}

architecture of Emitr {
	in "C";

	run `me->outputEvents.event.e = 1;`;
}

basicFB Printr;

interface of Printr {
	in event p;
	in int pDat with p; 
}

architecture of Printr {
	states {
		start {
			-> run on p;
		}

		run {
			run Printr_Print;
			-> run on p;
		}
	}

	algorithm Printr_Print in "C" `printf("val: %i\n", me->pDat);`;
}

compositeFB Netw;

interface of Netw {}

architecture of Netw{
	instance Incr incrr;
	instance Emitr emitrr;
	instance Printr printrr;

	events {
		incrr.rx <- emitrr.e;

		printrr.p <- incrr.tx; 
	}

	data {
		printrr.pDat <- incrr.txdat;
	}
}