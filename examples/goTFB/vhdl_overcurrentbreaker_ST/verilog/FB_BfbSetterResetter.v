// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB
// Verilog support is EXPERIMENTAL ONLY

// This file represents the Basic Function Block for BfbSetterResetter

//defines for state names used internally
`define STATE_s_init 0
`define STATE_s_reset 1
`define STATE_s_set 2


module FB_BfbSetterResetter 

(
		input wire clk,
		
		
		//input events
		input wire test_eI,
		input wire set_eI,
		input wire unsafe_eI,
		
		
		//output events
		output wire b_change_eO,
		
		
		
		//output variables
		output reg  b_O ,
		

		input reset
);


////BEGIN internal copies of I/O
//input events
wire test;
assign test = test_eI;
wire set;
assign set = set_eI;
wire unsafe;
assign unsafe = unsafe_eI;

//output events
reg b_change;
assign b_change_eO = b_change;


//output variables
reg  b ;

////END internal copies of I/O

////BEGIN internal vars

////END internal vars

//STATE variables
reg [1:0] state = `STATE_s_init;
reg entered = 1'b0;

always@(posedge clk) begin

	if(reset) begin
		//reset state 
		state = `STATE_s_init;

		//reset I/O registers
		
		b = 0;
		//reset internal vars
	end else begin

		//BEGIN update internal inputs on relevant events
		
		//END update internal inputs

		//BEGIN ecc 
		case(state) 
			default: begin
				if(1) begin
					state = `STATE_s_reset;
					entered = 1'b1;
				end;
			end `STATE_s_reset: begin
				if(set) begin
					state = `STATE_s_set;
					entered = 1'b1;
				end;
			end `STATE_s_set: begin
				if(test || unsafe) begin
					state = `STATE_s_reset;
					entered = 1'b1;
				end;
			end 
		endcase
		//END ecc

		//BEGIN algorithms

		//END algorithms

		//BEGIN update external outputs on relevant events
		
		if(b_change) begin 
			b_O = b;
			
		end
		
		//END update external outputs
	end
end
endmodule