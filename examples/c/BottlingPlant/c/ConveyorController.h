// This file has been automatically generated by goFB and should not be edited by hand
// Transpiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block ConveyorController
#ifndef CONVEYORCONTROLLER_H_
#define CONVEYORCONTROLLER_H_

#include "fbtypes.h"

//This is a BFB, so we need an enum type for the state machine
enum ConveyorController_states { STATE_ConveyorController_E_Stop, STATE_ConveyorController_Running, STATE_ConveyorController_Pause };


union ConveyorControllerInputEvents {
	struct {
		UDINT InjectDone : 1;
		UDINT EmergencyStopChanged : 1;
		UDINT LasersChanged : 1;
	} event;
	UDINT events[1];
};


union ConveyorControllerOutputEvents {
	struct {
		UDINT ConveyorChanged : 1;
		UDINT ConveyorStoppedForInject : 1;
	} event;
	UDINT events[1];
};


struct ConveyorController {
    //input events
	union ConveyorControllerInputEvents inputEvents;

    //output events
	union ConveyorControllerOutputEvents outputEvents;

    //input vars
	BOOL EmergencyStop;
    BOOL InjectSiteLaser;
    
    //output vars
	BYTE ConveyorSpeed;
    
	//any internal vars (BFBs only)
    BOOL Variable1;
    
	//any child FBs (CFBs only)
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	enum ConveyorController_states _state; //stores current state
	BOOL _trigger; //indicates if a state transition has occured this tick
	
};

//all FBs get an init function
int ConveyorController_init(struct ConveyorController *me);

//all FBs get a run function
void ConveyorController_run(struct ConveyorController *me);


//basic FBs have a number of algorithm functions

void ConveyorController_ConveyorStart(struct ConveyorController *me);

void ConveyorController_ConveyorStop(struct ConveyorController *me);

void ConveyorController_ConveyorRunning(struct ConveyorController *me);

void ConveyorController_ConveyorEStop(struct ConveyorController *me);


#endif
