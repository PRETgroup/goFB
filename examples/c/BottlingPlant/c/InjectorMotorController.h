// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block InjectorMotorController
#ifndef INJECTORMOTORCONTROLLER_H_
#define INJECTORMOTORCONTROLLER_H_

#include "fbtypes.h"

//This is a BFB, so we need an enum type for the state machine
enum InjectorMotorController_states { STATE_InjectorMotorController_MoveArmUp, STATE_InjectorMotorController_Await_Bottle, STATE_InjectorMotorController_MoveArmDown, STATE_InjectorMotorController_Await_Pumping };


union InjectorMotorControllerInputEvents {
	struct {
		UDINT InjectorArmFinishedMovement : 1;
		UDINT EmergencyStopChanged : 1;
		UDINT ConveyorStoppedForInject : 1;
		UDINT PumpFinished : 1;
	} event;
	UDINT events[1];
};


union InjectorMotorControllerOutputEvents {
	struct {
		UDINT StartPump : 1;
		UDINT InjectDone : 1;
		UDINT InjectorPositionChanged : 1;
		UDINT InjectRunning : 1;
	} event;
	UDINT events[1];
};


typedef struct {
    //input events
	union InjectorMotorControllerInputEvents inputEvents;

    //output events
	union InjectorMotorControllerOutputEvents outputEvents;

    //input vars
	BOOL EmergencyStop;
    
    //output vars
	BYTE InjectorPosition;
    
	//any internal vars (BFBs only)
    
	//any child FBs (CFBs only)
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	enum InjectorMotorController_states _state; //stores current state
	BOOL _trigger; //indicates if a state transition has occured this tick
	
} InjectorMotorController_t;

//all FBs get a preinit function
int InjectorMotorController_preinit(InjectorMotorController_t  *me);

//all FBs get an init function
int InjectorMotorController_init(InjectorMotorController_t  *me);

//all FBs get a run function
void InjectorMotorController_run(InjectorMotorController_t  *me);

//basic FBs have a number of algorithm functions

void InjectorMotorController_SetArmDownPosition(InjectorMotorController_t  *me);

void InjectorMotorController_SetArmUpPosition(InjectorMotorController_t  *me);

void InjectorMotorController_Algorithm1(InjectorMotorController_t  *me);


#endif
