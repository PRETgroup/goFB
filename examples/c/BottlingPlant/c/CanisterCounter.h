// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block CanisterCounter
#ifndef CANISTERCOUNTER_H_
#define CANISTERCOUNTER_H_

#include "fbtypes.h"

//This is a BFB, so we need an enum type for the state machine
enum CanisterCounter_states { STATE_CanisterCounter_Start };


union CanisterCounterInputEvents {
	struct {
		UDINT LasersChanged : 1;
	} event;
	UDINT events[1];
};


union CanisterCounterOutputEvents {
	struct {
		UDINT CanisterCountChanged : 1;
	} event;
	UDINT events[1];
};


struct CanisterCounter {
    //input events
	union CanisterCounterInputEvents inputEvents;

    //output events
	union CanisterCounterOutputEvents outputEvents;

    //input vars
	BOOL DoorSiteLaser;
    BOOL RejectBinLaser;
    BOOL AcceptBinLaser;
    
    //output vars
	BYTE CanisterCount;
    
	//any internal vars (BFBs only)
    
	//any child FBs (CFBs only)
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	enum CanisterCounter_states _state; //stores current state
	BOOL _trigger; //indicates if a state transition has occured this tick
	
};

//all FBs get a preinit function
int CanisterCounter_preinit(struct CanisterCounter *me);

//all FBs get an init function
int CanisterCounter_init(struct CanisterCounter *me);

//all FBs get a run function
void CanisterCounter_run(struct CanisterCounter *me);


//basic FBs have a number of algorithm functions

void CanisterCounter_ChangeCount(struct CanisterCounter *me);


#endif
