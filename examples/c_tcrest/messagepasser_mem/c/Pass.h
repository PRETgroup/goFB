// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB

// This file represents the interface of Function Block Pass
#ifndef PASS_H_
#define PASS_H_

#include "fbtypes.h"

//This is a BFB, so we need an enum type for the state machine
enum Pass_states { STATE_Pass_Start, STATE_Pass_update };


union PassInputEvents {
	struct {
		UDINT CountChanged;
	} event;
	
};


union PassOutputEvents {
	struct {
		UDINT OutCountChanged;
	} event;
	
};


typedef struct {
    //input events
	union PassInputEvents inputEvents;

    //output events
	union PassOutputEvents outputEvents;

    //input vars
	LINT Count;
    
    //output vars
	LINT OutCount;
    
	//any internal vars (BFBs only)
    
	//any child FBs (CFBs only)
	
	//resource vars
	
	//resources (Devices only)
	
	//state and trigger (BFBs only)
	enum Pass_states _state; //stores current state
	BOOL _trigger; //indicates if a state transition has occured this tick
	
} Pass_t;

//all FBs get a preinit function
int Pass_preinit(Pass_t  *me);

//all FBs get an init function
int Pass_init(Pass_t  *me);

//all FBs get a run function
void Pass_run(Pass_t  *me);

//basic FBs have a number of algorithm functions

void Pass_UpdateCountOut(Pass_t  *me);


#endif
