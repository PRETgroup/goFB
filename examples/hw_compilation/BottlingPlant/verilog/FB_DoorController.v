// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB
// Verilog support is EXPERIMENTAL ONLY

// This file represents the Basic Function Block for DoorController

//defines for state names used internally
`define STATE_E_Stop 0
`define STATE_Run 1
`define STATE_Await 2


module FB_DoorController 

(
		input wire clk,
		
		//input events
		input wire ReleaseDoorOverride_eI,
		input wire BottlingDone_eI,
		input wire EmergencyStopChanged_eI,
		
		//output events
		output wire DoorReleaseCanister_eO,
		
		//input variables
		input wire  EmergencyStop_I,
		
		

		input reset
);


////BEGIN internal copies of I/O
//input events
wire ReleaseDoorOverride;
assign ReleaseDoorOverride = ReleaseDoorOverride_eI;
wire BottlingDone;
assign BottlingDone = BottlingDone_eI;
wire EmergencyStopChanged;
assign EmergencyStopChanged = EmergencyStopChanged_eI;

//output events
reg DoorReleaseCanister;
assign DoorReleaseCanister_eO = DoorReleaseCanister;

//input variables
reg  EmergencyStop ;


////END internal copies of I/O

////BEGIN internal vars

////END internal vars

//BEGIN STATE variables
reg [1:0] state = `STATE_E_Stop;
reg entered = 1'b0;
//END STATE variables

//BEGIN algorithm triggers

//END algorithm triggers


always@(posedge clk) begin

	if(reset) begin
		//reset state 
		state = `STATE_E_Stop;

		//reset I/O registers
		DoorReleaseCanister = 1'b0;
		
		EmergencyStop = 0;
		
		//reset internal vars
	end else begin

		//BEGIN clear output events
		DoorReleaseCanister = 1'b0;
		
		//END clear output events

		//BEGIN update internal inputs on relevant events
		
		if(EmergencyStopChanged) begin 
			EmergencyStop = EmergencyStop_I;
			
		end
		
		//END update internal inputs

		//BEGIN ecc 
		entered = 1'b0;
		case(state) 
			default: begin
				if(EmergencyStopChanged && ~EmergencyStop) begin
					state = `STATE_Await;
					entered = 1'b1;
				end
			end 
			`STATE_Run: begin
				if(EmergencyStopChanged && EmergencyStop) begin
					state = `STATE_E_Stop;
					entered = 1'b1;
				end else if(ReleaseDoorOverride || BottlingDone) begin
					state = `STATE_Run;
					entered = 1'b1;
				end
			end 
			`STATE_Await: begin
				if(ReleaseDoorOverride || BottlingDone) begin
					state = `STATE_Run;
					entered = 1'b1;
				end
			end 
			
		endcase
		//END ecc

		//BEGIN triggers
		
		if(entered) begin
			case(state)
				default: begin
					
				end 
				`STATE_Run: begin
					DoorReleaseCanister = 1'b1;
					
				end 
				`STATE_Await: begin
					
				end 
				
			endcase
		end
		//END triggers
		
		//BEGIN algorithms
		
		//END algorithms

		//BEGIN update external output variables on relevant events
		
		//END update external output variables 
	end
end
endmodule