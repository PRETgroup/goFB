// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB
// Verilog support is EXPERIMENTAL ONLY

// This file represents the Basic Function Block for ConveyorController

//defines for state names used internally
`define STATE_E_Stop 0
`define STATE_Running 1
`define STATE_Pause 2


module FB_ConveyorController 

(
		input wire clk,
		
		//input events
		input wire InjectDone_eI,
		input wire EmergencyStopChanged_eI,
		input wire LasersChanged_eI,
		
		//output events
		output wire ConveyorChanged_eO,
		output wire ConveyorStoppedForInject_eO,
		
		//input variables
		input wire  EmergencyStop_I,
		input wire  InjectSiteLaser_I,
		
		//output variables
		output reg [7:0] ConveyorSpeed_O ,
		

		input reset
);


////BEGIN internal copies of I/O
//input events
wire InjectDone;
assign InjectDone = InjectDone_eI;
wire EmergencyStopChanged;
assign EmergencyStopChanged = EmergencyStopChanged_eI;
wire LasersChanged;
assign LasersChanged = LasersChanged_eI;

//output events
reg ConveyorChanged;
assign ConveyorChanged_eO = ConveyorChanged;
reg ConveyorStoppedForInject;
assign ConveyorStoppedForInject_eO = ConveyorStoppedForInject;

//input variables
reg  EmergencyStop ;
reg  InjectSiteLaser ;

//output variables
reg [7:0] ConveyorSpeed ;

////END internal copies of I/O

////BEGIN internal vars

reg   Variable1 ; 
////END internal vars

//BEGIN STATE variables
reg [1:0] state = `STATE_E_Stop;
reg entered = 1'b0;
//END STATE variables

//BEGIN algorithm triggers
reg ConveyorStart_alg_en = 1'b0; 
reg ConveyorStop_alg_en = 1'b0; 

//END algorithm triggers


always@(posedge clk) begin

	if(reset) begin
		//reset state 
		state = `STATE_E_Stop;

		//reset I/O registers
		ConveyorChanged = 1'b0;
		ConveyorStoppedForInject = 1'b0;
		
		EmergencyStop = 0;
		InjectSiteLaser = 0;
		
		ConveyorSpeed = 0;
		//reset internal vars
		Variable1 = 0;
	end else begin

		//BEGIN clear output events
		ConveyorChanged = 1'b0;
		ConveyorStoppedForInject = 1'b0;
		
		//END clear output events

		//BEGIN update internal inputs on relevant events
		
		if(EmergencyStopChanged) begin 
			EmergencyStop = EmergencyStop_I;
			
		end
		
		if(LasersChanged) begin 
			InjectSiteLaser = InjectSiteLaser_I;
			
		end
		
		//END update internal inputs

		//BEGIN ecc 
		entered = 1'b0;
		case(state) 
			`STATE_E_Stop: begin
				if(EmergencyStopChanged && ~EmergencyStop) begin
					state = `STATE_Running;
					entered = 1'b1;
				end
			end 
			`STATE_Running: begin
				if(LasersChanged && InjectSiteLaser) begin
					state = `STATE_Pause;
					entered = 1'b1;
				end
			end 
			`STATE_Pause: begin
				if(InjectDone) begin
					state = `STATE_Running;
					entered = 1'b1;
				end else if(EmergencyStopChanged && EmergencyStop) begin
					state = `STATE_E_Stop;
					entered = 1'b1;
				end
			end 
			default: begin
				state = 0;
			end
		endcase
		//END ecc

		//BEGIN triggers
		ConveyorStart_alg_en = 1'b0; 
		ConveyorStop_alg_en = 1'b0; 
		
		if(entered) begin
			case(state)
				`STATE_E_Stop: begin
					
				end 
				`STATE_Running: begin
					ConveyorStart_alg_en = 1'b1;
					ConveyorChanged = 1'b1;
					
				end 
				`STATE_Pause: begin
					ConveyorStop_alg_en = 1'b1;
					ConveyorChanged = 1'b1;
					ConveyorStoppedForInject = 1'b1;
					
				end 
				default: begin

				end
			endcase
		end
		//END triggers
		
		//BEGIN algorithms
		if(ConveyorStart_alg_en) begin
			ConveyorSpeed = 1;

		end 
		if(ConveyorStop_alg_en) begin
			ConveyorSpeed = 0;

		end 
		
		//END algorithms

		//BEGIN update external output variables on relevant events
		
		if(ConveyorChanged) begin 
			ConveyorSpeed_O = ConveyorSpeed;
			
		end
		
		//END update external output variables 
	end
end
endmodule