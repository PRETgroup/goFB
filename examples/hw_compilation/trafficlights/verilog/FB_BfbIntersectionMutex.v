// This file has been automatically generated by goFB and should not be edited by hand
// Compiler written by Hammond Pearce and available at github.com/kiwih/goFB
// Verilog support is EXPERIMENTAL ONLY

// This file represents the Basic Function Block for BfbIntersectionMutex

//defines for state names used internally
`define STATE_s_init 0
`define STATE_s_N_S_Go 1
`define STATE_s_E_W_Go 2


module FB_BfbIntersectionMutex 

(
		input wire clk,
		
		//input events
		input wire Start_eI,
		input wire N_S_Done_eI,
		input wire E_W_Done_eI,
		
		//output events
		output wire N_S_Start_eO,
		output wire E_W_Start_eO,
		
		
		

		input reset
);


////BEGIN internal copies of I/O
//input events
wire Start;
assign Start = Start_eI;
wire N_S_Done;
assign N_S_Done = N_S_Done_eI;
wire E_W_Done;
assign E_W_Done = E_W_Done_eI;

//output events
reg N_S_Start;
assign N_S_Start_eO = N_S_Start;
reg E_W_Start;
assign E_W_Start_eO = E_W_Start;



////END internal copies of I/O

////BEGIN internal vars

////END internal vars

//BEGIN STATE variables
reg [1:0] state = `STATE_s_init;
reg entered = 1'b0;
//END STATE variables

//BEGIN algorithm triggers

//END algorithm triggers


always@(posedge clk) begin

	if(reset) begin
		//reset state 
		state = `STATE_s_init;

		//reset I/O registers
		N_S_Start = 1'b0;
		E_W_Start = 1'b0;
		
		
		//reset internal vars
	end else begin

		//BEGIN clear output events
		N_S_Start = 1'b0;
		E_W_Start = 1'b0;
		
		//END clear output events

		//BEGIN update internal inputs on relevant events
		
		//END update internal inputs

		//BEGIN ecc 
		entered = 1'b0;
		case(state) 
			`STATE_s_init: begin
				if(Start) begin
					state = `STATE_s_N_S_Go;
					entered = 1'b1;
				end
			end 
			`STATE_s_N_S_Go: begin
				if(N_S_Done) begin
					state = `STATE_s_E_W_Go;
					entered = 1'b1;
				end
			end 
			`STATE_s_E_W_Go: begin
				if(E_W_Done) begin
					state = `STATE_s_N_S_Go;
					entered = 1'b1;
				end
			end 
			default: begin
				state = 0;
			end
		endcase
		//END ecc

		//BEGIN triggers
		
		if(entered) begin
			case(state)
				`STATE_s_init: begin
					
				end 
				`STATE_s_N_S_Go: begin
					N_S_Start = 1'b1;
					
				end 
				`STATE_s_E_W_Go: begin
					E_W_Start = 1'b1;
					
				end 
				default: begin

				end
			endcase
		end
		//END triggers
		
		//BEGIN algorithms
		
		//END algorithms

		//BEGIN update external output variables on relevant events
		
		//END update external output variables 
	end
end
endmodule