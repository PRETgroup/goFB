{{define "compositeFB"}}-- This file has been automatically generated by goFB and should not be edited by hand
-- Compiler written by Hammond Pearce and available at github.com/kiwih/goFB
-- VHDL support is EXPERIMENTAL ONLY
{{$block := index .Blocks .BlockIndex}}{{$blocks := .Blocks}}{{$compositeFB := $block.CompositeFB}}{{$uniqueConnsWithTypes := $block.GetUniqueDataConnSourcesWithTypes $blocks}}
-- This file represents the Composite Function Block for {{$block.Name}}

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

{{template "_entityFB" .}}
architecture rtl of {{$block.Name}} is
	-- Signals needed for event connections {{range $curConnIndex, $connName := $compositeFB.GetUniqueEventConnSources}}
	signal {{renameConnSignal $connName}} : std_logic;{{end}}

	-- Signals needed for data connections {{range $curConnIndex, $conn := $uniqueConnsWithTypes}}
	signal {{renameConnSignal $conn.Source}} : {{getVhdlType $conn.Type}}; --type was {{$conn.Type}}{{end}}

	-- Signals needed for the done signals {{range $currChildIndex, $child := $compositeFB.FBs}}
	signal {{$child.Name}}_done : std_logic;{{end}}
begin
	--top level I/O to signals
	{{if $block.EventInputs}}--input events
	{{range $index, $event := $block.EventInputs}}{{range $curConnIndex, $conn := $compositeFB.EventConnections}}{{if eq $conn.Source $event.Name}}{{renameConnSignal $conn.Source}} <= {{$event.Name}}_eI;
	{{end}}{{end}}{{end}}
	{{end}}{{if $block.EventOutputs}}--output events
	{{range $index, $event := $block.EventOutputs}}{{range $curConnIndex, $conn := $compositeFB.EventConnections}}{{if eq $conn.Destination $event.Name}}{{$event.Name}}_eO <= {{renameConnSignal $conn.Source}};
	{{end}}{{end}}{{end}}
	{{end}}{{if $block.InputVars}}--input variables
	{{range $index, $var := $block.InputVars}}{{range $curConnIndex, $conn := $compositeFB.DataConnections}}{{if eq $conn.Source $var.Name}}{{renameConnSignal $conn.Source}} <= {{$var.Name}}_I;
	{{end}}{{end}}{{end}}
	{{end}}{{if $block.OutputVars}}--output events
	{{range $index, $var := $block.OutputVars}}{{range $curConnIndex, $conn := $compositeFB.DataConnections}}{{if eq $conn.Destination $var.Name}}{{$var.Name}}_O <= {{renameConnSignal $conn.Source}};
	{{end}}{{end}}{{end}}
	{{end}}
	-- child I/O to signals
	{{range $currChildIndex, $child := $compositeFB.FBs}}
	{{$child.Name}} : entity work.{{$child.Type}} port map(
		clk => clk,
		reset => reset,
		enable => enable,
		sync => sync,

		--event outputs {{/* For both events and data connection outputs, we need to only output the *unique* signals (vhdl can't drive many signals from a single output). Hence this rigmarole. */}}
		{{range $curConnIndex, $connName := $compositeFB.GetUniqueEventConnSources}}{{if connChildNameMatches $connName $child.Name}}{{connChildSourceOnly $connName}}_eO => {{renameConnSignal $connName}},
		{{end}}{{end}}
		--event inputs
		{{range $curConnIndex, $conn := $compositeFB.EventConnections}}{{if connChildNameMatches $conn.Destination $child.Name}}{{connChildSourceOnly $conn.Destination}}_eI => {{renameConnSignal $conn.Source}}, 
		{{end}}{{end}}
		--data outputs
		{{range $curConnIndex, $connName := $compositeFB.GetUniqueDataConnSources}}{{if connChildNameMatches $connName $child.Name}}{{connChildSourceOnly $connName}}_O => {{renameConnSignal $connName}}, 
		{{end}}{{end}}
		--data inputs
		{{range $curConnIndex, $conn := $compositeFB.DataConnections}}{{if connChildNameMatches $conn.Destination $child.Name}}{{connChildSourceOnly $conn.Destination}}_I => {{renameConnSignal $conn.Source}},
		{{end}}{{end}}

		{{$special := getSpecialIOForRef $child $blocks}}{{if $special.InternalVars}}--specials
		{{range $curSpecialIndex, $sInternal := $special.InternalVars}}{{$sInternal.Name}} => {{$sInternal.Name}}, --{{if variableIsTOPIO_IN $sInternal}}input{{else}}output{{end}}
		{{end}}{{end}}
		done => {{$child.Name}}_done
	);
	{{end}}

	-- done signal
	done <= {{if $compositeFB.FBs}}{{range $currChildIndex, $child := $compositeFB.FBs}}{{if $currChildIndex}} and {{end}}{{$child.Name}}_done{{end}}{{else}}'1'{{end}};
	
end rtl;
{{end}}
