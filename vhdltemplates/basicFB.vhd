{{define "basicFB"}}
-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for {{.Name}}

library ieee;
use ieee.std_logic_1164.all;
{{template "_entityFB" .}}
architecture rtl of {{.Name}} is
	{{$basicFB := .BasicFB}}
	-- Build an enumerated type for the state machine
	type state_type is ({{range $index, $state := $basicFB.States}}{{if $index}}, {{end}}{{$state.Name}}{{end}});

	-- Register to hold the current state
	signal state   : state_type;
	signal entered : std_logic;

begin
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= {{(index $basicFB.States 0).Name}};
			entered <= '0';
		elsif (rising_edge(clk)) then
			--default values
			state <= state;
			entered <= '1';

			--next state logic
			if entered = '0' then
				entered <= '1';
			else
				case state is
					{{range $curStateIndex, $curState := $basicFB.States}}when {{$curState.Name}}=>
						{{range $transIndex, $trans := $basicFB.GetTransitionsForState $curState.Name}}{{if $transIndex}}els{{end}}if {{getVhdlECCTransitionCondition $trans.Condition}} then
							state <= {{$trans.Destination}};
							entered <= '0';
						{{end}}end if;
					{{end}}
				end case;
			end if;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;

end rtl;
{{end}}
