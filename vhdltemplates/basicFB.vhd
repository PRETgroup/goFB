{{define "basicFB"}}
-- This file has been automatically generated by go-iec61499-vhdl and should not be edited by hand
-- Converter written by Hammond Pearce and available at github.com/kiwih/go-iec61499-vhdl

-- This file represents the Basic Function Block for {{.Name}}

library ieee;
use ieee.std_logic_1164.all;
{{template "_entityFB" .}}
architecture rtl of {{.Name}} is
	{{$basicFB := .BasicFB}}
	-- Build an enumerated type for the state machine
	type state_type is ({{range $index, $state := $basicFB.States}}{{if $index}}, {{end}}{{$state.Name}}{{end}});

	-- Register to hold the current state
	signal state   : state_type;
	signal entered : std_logic; --entered is used to trigger algorithms (algorithms should only run upon entering a state)

	-- signals for enabling algorithms	{{range $algIndex, $alg := $basicFB.Algorithms}}
	signal {{$alg.Name}}_alg_en : std_logic; {{end}}

	{{if $basicFB.InternalVars}}--internal variables {{range $varIndex, $var := $basicFB.InternalVars.Variables}}
	signal {{$var.Name}} : {{getVhdlType $var.Type}}; --type was {{$var.Type}} {{end}}{{end}}
begin
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= {{(index $basicFB.States 0).Name}};
			entered <= '0';
		elsif (rising_edge(clk)) then
			if enable = '1' then 
				--default values
				state <= state;
				entered <= '1';

				--next state logic
				if entered = '0' then
					entered <= '1';
				else
					case state is
						{{range $curStateIndex, $curState := $basicFB.States}}when {{$curState.Name}}=>
							{{range $transIndex, $trans := $basicFB.GetTransitionsForState $curState.Name}}{{if $transIndex}}els{{end}}if {{getVhdlECCTransitionCondition $trans.Condition}} then
								state <= {{$trans.Destination}};
								entered <= '0';
							{{end}}end if;
						{{end}}
					end case;
				end if;
			end if;
		end if;
	end process;

	-- Event outputs and internal algorithm triggers depend solely on the current state
	process (state)
	begin
		--default values
		{{if .EventOutputs}}--events
		{{range $index, $event := .EventOutputs.Events}}{{$event.Name}} <= '0';
		{{end}}{{end}}
		{{if $basicFB.Algorithms}}--algorithms{{range $algIndex, $alg := $basicFB.Algorithms}}
		{{$alg.Name}}_alg_en <= '0'; {{end}}{{end}}

		case state is
			{{range $curStateIndex, $curState := $basicFB.States}}when {{$curState.Name}}=>
				{{range $actionIndex, $action := $curState.ECActions}}{{if $action.Algorithm}}{{$action.Algorithm}}_alg_en <= '1';
				{{end}}{{if $action.Output}}{{$action.Output}} <= '1';
				{{end}}{{end}}
			{{end}}
		end case;
	end process;

	-- Algorithms
	{{range $algIndex, $alg := $basicFB.Algorithms}}
	-- Algorithm {{$alg.Name}}
	process(clk)
	begin
		if rising_edge(clk) then
			if (entered = '0' and {{$alg.Name}}_alg_en = '1') then

--begin algorithm raw text
{{$alg.Other.Text}}
--end algorithm raw text

			end if;
		end if;
	end process;
	{{end}}
end rtl;
{{end}}
