{{define "top"}}
--This is an autogenerated file
--Do not modify it by hand
--Generated at {{curdatetime}}
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.enforcement_types_{{underscoreString .Name}}.all;
{{$ge := .}}
entity enforcement_top_{{underscoreString .Name}} is
    port
    (
        clk         : in std_logic;
		reset       : in std_logic;

        {{range $enfIndex, $enf := .IO.Enforce}}
		{{underscoreString $enf.Name}}_i : in  {{$enf.Type}};
		{{underscoreString $enf.Name}}_o : out {{$enf.Type}};
		{{end}}

		e : out std_logic_vector({{add (len $ge.Policies) -1}} downto 0)
    );
end entity;

architecture behaviour of enforcement_top_{{underscoreString .Name}} is
    signal ns_time : unsigned(63 downto 0);
	signal enfI, {{range $polIndex, $pol := .Policies}}{{if lt $polIndex (add (len $ge.Policies) -1)}}enf{{$polIndex}}_{{add $polIndex 1}}, {{end}}{{end}}enfO : enforced_signals_{{underscoreString .Name}};
begin
    
	--this is our global nanosecond timer which counts time since inception
	--64 refers to the number of bits in the counter
	--20 refers to the number the counter will be incremented each tick (for a 50MHz clock, we will have 20ns per tick)
	--a 64-bit nanosecond timer will be able to count for 584.554531 years before overflowing
	count: entity work.binary_counter generic map(
		N => 64,
		I => 20	
	) port map (
		clk		  => clk,
		reset	  	  => '0',
		enable	  => '1',
		q		  	  => ns_time
	); 

	--connect the IO
	{{range $enfIndex, $enf := .IO.Enforce}}
	enfI.{{underscoreString $enf.Name}} <= {{underscoreString $enf.Name}}_i;
	{{underscoreString $enf.Name}}_o <= enfO.{{underscoreString $enf.Name}};
	{{end}}

	--policies
	{{range $polIndex, $policy := .Policies}}
	enf{{$polIndex}} : entity work.enforcer_{{underscoreString $ge.Name}}_{{underscoreString $policy.Name}} port map (
		clk 	=> clk,
		reset 	=> reset,
		t 		=> ns_time,
		e 		=> e({{$polIndex}}),
		q 		=> {{if eq $polIndex 0}}enfI{{else}}enf{{add $polIndex -1}}_{{$polIndex}}{{end}},
		q_prime => {{if eq $polIndex (add (len $ge.Policies) -1)}}enfO{{else}}enf{{$polIndex}}_{{add $polIndex 1}}{{end}}
	);
	{{end}}
end architecture;


{{end}}